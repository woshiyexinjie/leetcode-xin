package com.helloxin.leetcode.algorithms;

import java.util.HashMap;
import java.util.Map;

/**
 * Created by nandiexin on 2019/6/19.
 * In a deck of cards, each card has an integer written on it.
 * <p>
 * Return true if and only if you can choose X >= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:
 * <p>
 * Each group has exactly X cards.
 * All the cards in each group have the same integer.
 * <p>
 * <p>
 * Example 1:
 * <p>
 * Input: [1,2,3,4,4,3,2,1]
 * Output: true
 * Explanation: Possible partition [1,1],[2,2],[3,3],[4,4]
 * Example 2:
 * <p>
 * Input: [1,1,1,2,2,2,3,3]
 * Output: false
 * Explanation: No possible partition.
 * Example 3:
 * <p>
 * Input: [1]
 * Output: false
 * Explanation: No possible partition.
 * Example 4:
 * <p>
 * Input: [1,1]
 * Output: true
 * Explanation: Possible partition [1,1]
 * Example 5:
 * <p>
 * Input: [1,1,2,2,2,2]
 * Output: true
 * Explanation: Possible partition [1,1],[2,2],[2,2]
 * <p>
 * Note:
 * <p>
 * 1 <= deck.length <= 10000
 * 0 <= deck[i] < 10000
 */
public class XOfAKindInADeckOfCards914 {

    public static boolean hasGroupsSizeX(int[] deck) {

        //把数据存在map里面
        Map<Integer,Integer> map = new HashMap<>();
        for(int i =0;i<deck.length;i++){
            int num = map.getOrDefault(deck[i],0)+1;
            map.put(deck[i],num);
        }
        //遍历两次
        int sml = Integer.MAX_VALUE;
        for(Map.Entry<Integer,Integer> entry:map.entrySet()){
            if(entry.getValue() < sml){
                sml = entry.getValue();
            }
        }
        //找个方法求最小公约数
        for(int i = 2;i< sml+1;i++) {
            boolean check = true;
            for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
                if (entry.getValue() % i != 0) {
                    check= false;
                }
            }
            if(check == true){
                return true;
            }
        }
        return false;
    }

    public static boolean hasGroupsSizeXV2(int[] deck) {
        Map<Integer, Integer> count = new HashMap<>();
        int res = 0;
        for (int i : deck) {
            count.put(i, count.getOrDefault(i, 0) + 1);
        }
        for (int i : count.values()) {
            res = gcd(i, res);
        }
        return res > 1;
    }

    public static int gcd(int a, int b) {
        return b > 0 ? gcd(b, a % b) : a;
    }



    public static void main(String[] args) {

       int deck []={0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               0,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               1,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               2,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               3,
               4,
               4,
               4,
               4,
               4,
               4,
               4,
               4,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               5,
               6,
               6,
               6,
               6,
               6,
               6,
               7,
               7,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               8,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               9,
               10,
               10,
               10,
               10,
               10,
               10,
               10,
               10,
               10,
               10,
               11,
               11,
               11,
               11,
               11,
               11,
               11,
               11,
               11,
               11,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               12,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               13,
               14,
               14,
               14,
               14,
               14,
               14,
               14,
               14,
               14,
               14,
               15,
               15,
               15,
               15,
               15,
               15,
               15,
               15,
               15,
               15,
               15,
               15,
               16,
               16,
               16,
               16,
               17,
               17,
               17,
               17,
               18,
               18,
               18,
               18};
        System.out.println(hasGroupsSizeXV2(deck));
    }


}
